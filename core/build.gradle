import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.8"
    }
}

apply plugin: 'java-library'
apply from: rootProject.file('gradle/publish.gradle')
apply from: rootProject.file('gradle/java-artifacts.gradle')
apply plugin: "com.google.protobuf"

configurations.all {
    resolutionStrategy.dependencySubstitution {
        resolutionStrategy {
            force deps.bundletool
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compileOnly "com.android.tools.build:aapt2-proto:0.4.0"
    compileOnly gradleApi()
//    compile deps.gradle.tools

    implementation "com.android.support:support-annotations:24.2.0"
    implementation 'commons-io:commons-io:2.6'
    compile 'commons-codec:commons-codec:1.5'

    annotationProcessor "com.google.auto.value:auto-value:1.5.2"
    implementation "com.google.auto.value:auto-value:1.5.2"
    compile group: 'org.dom4j', name: 'dom4j', version: '2.1.0'
    compile deps.bundletool

    testImplementation deps.gradle.tools
    testImplementation "junit:junit:4.12"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testImplementation "com.google.guava:guava:27.0.1-jre"
    testImplementation "org.mockito:mockito-core:2.18.3"
    testImplementation "com.google.truth.extensions:truth-java8-extension:0.45"
    testImplementation "com.google.truth.extensions:truth-proto-extension:0.45"
    testImplementation "com.google.auto.value:auto-value:1.5.2"
    testAnnotationProcessor "com.google.auto.value:auto-value:1.5.2"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.4.0"
    }
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

jar {
    manifest {
        attributes 'Main-Class': 'com.bytedance.android.aabresguard.AabResGuardMain'
        attributes 'Manifest-Version': versions[ARTIFACT_ID]
        attributes "Jar-Version": versions[ARTIFACT_ID]
        attributes "Build-Time": releaseTime()
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

// copy the jar to work directory
task buildJar(type: Copy, dependsOn: [build, jar]) {
    version = versions[ARTIFACT_ID]
    from('build/libs') {
        include '*' + version + '*.jar'
    }
    into("../repo/AabResGuard-jar/${version}/")
}


task proguardJar(type: ProGuardTask, dependsOn: [build, jar]) {
    version = versions[ARTIFACT_ID]
    injars "build/libs/core-${version}.jar"
    outjars 'build/libs/proguard.jar'
    configuration 'proguard-rules.pro'
    verbose()
    copy {
        from('build/libs') {
            include '*' + version + '*.jar'
        }
        into("../repo/AabResGuard-jar/${version}/")
    }
}

def static releaseTime() {
    return new Date().format("yyyy-MM-dd HH:mm ZZZ", TimeZone.getDefault())
}

defaultTasks 'buildJar'